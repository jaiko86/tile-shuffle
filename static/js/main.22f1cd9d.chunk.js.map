{"version":3,"sources":["components/Puzzle.js","components/PuzzleConfigUI.js","App.js","serviceWorker.js","index.js"],"names":["Puzzle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveCell","bind","assertThisInitialized","checkSolution","pos","size","x","y","Math","floor","cellPos","_this$props","cellsArray","blankIdx","blankPos","blankCoor","getCoordinate","cellIdx","indexOf","cellCoor","x1","y1","x2","y2","cond1","cond2","cond3","abs","cond4","swap","_this2","_this$props2","isSolution","isSmall","dim","cellDivs","map","cellNum","isBlank","_this2$getCoordinate","react_default","a","createElement","className","join","key","style","left","top","onClick","width","height","filter","e","Component","PuzzleConfigUI","state","tempSize","handleInputChange","createPuzzle","val","target","value","setState","type","placeholder","min","max","onChange","onBlur","shufflePuzzle","App","arr","temp","pow","unshift","limit","length","i","randomIdx","random","shuffleArray","toConsumableArray","idx1","idx2","val1","val2","newArr","PuzzleConfigUI_PuzzleConfigUI","Puzzle_Puzzle","class","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22f1cd9d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Puzzle extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.moveCell = this.moveCell.bind(this)\r\n    this.checkSolution = this.checkSolution.bind(this)\r\n  }\r\n\r\n  // static methods\r\n  getCoordinate(pos){\r\n    let size = this.props.size\r\n    let x = pos % size\r\n    let y = Math.floor(pos / size)\r\n    return {x, y}\r\n  }\r\n\r\n  checkSolution(){\r\n\r\n  }\r\n\r\n  // methods\r\n  moveCell(cellPos){\r\n    let { cellsArray, blankIdx } = this.props\r\n    let blankPos = cellsArray[blankIdx]\r\n    let blankCoor = this.getCoordinate(blankPos)\r\n    let cellIdx = cellsArray.indexOf(cellPos)\r\n    let cellCoor = this.getCoordinate(cellPos)\r\n\r\n    let x1 = blankCoor.x\r\n    let y1 = blankCoor.y\r\n    let x2 = cellCoor.x\r\n    let y2 = cellCoor.y\r\n    \r\n    let cond1 = x1 === x2\r\n    let cond2 = y1 === y2\r\n    let cond3 = Math.abs(x1 - x2) === 1\r\n    let cond4 = Math.abs(y1 - y2) === 1\r\n\r\n    if ((cond1 && cond4) || (cond2 && cond3)) {\r\n      this.props.swap(blankIdx, cellIdx, blankPos, cellPos)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // cellArray[2] = 5 => cell#2 is at Position 5\r\n    let { cellsArray, size, isSolution } = this.props\r\n    let isSmall = size > 5\r\n    let dim = isSmall ? 80 : 100\r\n    let cellDivs = cellsArray.map((pos, cellNum)=>{\r\n      let isBlank = cellNum === this.props.blankIdx\r\n      let {x, y} = this.getCoordinate(pos)\r\n      let elem = (\r\n        <div\r\n          className={[\r\n            'cell', \r\n            isBlank ? 'blank' : '',\r\n            isSmall ? 'small' : '',\r\n          ].join(' ')}\r\n          key={cellNum}\r\n          style={{\r\n            left: x * dim,\r\n            top: y * dim,\r\n          }}\r\n          onClick={() => { \r\n            if(!isBlank) this.moveCell(pos)\r\n          }}\r\n        >\r\n          {isBlank ? '' : cellNum + 1}\r\n        </div>\r\n      )\r\n      return elem\r\n    })\r\n    let width = size * dim\r\n    let height = size * dim\r\n    return (\r\n      <div \r\n        className={[\r\n          'puzzle',\r\n          isSolution ? 'solution' : ''\r\n        ].filter(e=>e).join(' ')}\r\n        style={{width, height}}\r\n      >\r\n        {cellDivs}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class PuzzleConfigUI extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      tempSize: 3,\r\n    }\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n    this.createPuzzle = this.createPuzzle.bind(this)\r\n  }\r\n\r\n  // methods\r\n  handleInputChange(e){\r\n    let val = e.target.value >> 0\r\n    val = val < 3 ? 3 : \r\n      val > 10 ? 10 :\r\n      val\r\n    this.setState({\r\n      tempSize: val\r\n    })\r\n  }\r\n\r\n  createPuzzle(){\r\n    const size = this.state.tempSize\r\n    this.props.createPuzzle(size)\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <input \r\n          type=\"number\" \r\n          placeholder=\"Size âˆˆ [3,10]\"\r\n          value={this.state.tempSize}\r\n          min=\"3\"\r\n          max=\"10\"\r\n          onChange={e=>{\r\n            this.setState({\r\n              tempSize : e.target.value\r\n            })\r\n          }}\r\n          onBlur={this.handleInputChange}\r\n        />\r\n        <button\r\n          onClick={this.createPuzzle}\r\n        >\r\n          Create\r\n        </button>\r\n        <button\r\n          onClick={this.props.shufflePuzzle}\r\n        >\r\n          Shuffle\r\n        </button>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\nimport './App.css'\nimport './style/puzzle.scss'\nimport Puzzle from './components/Puzzle.js'\nimport PuzzleConfigUI from './components/PuzzleConfigUI.js'\n\n\n\nfunction shuffleArray(arr){\n  let random = limit=>Math.floor(Math.random() * limit)\n  let length = arr.length\n  for(let i = 0; i < length; i++){\n    let randomIdx = random(length)\n    let temp = arr[randomIdx]\n    arr[randomIdx] = arr[i]\n    arr[i] = temp\n  }\n  return arr\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      size: 3,\n      blankIdx: 9,\n      cellsArray: [],\n      isSolution: false,\n      // snapshots: [],\n      // currStep: 0,\n      // autoPlay: false,\n      // isSolved: false,\n      // stepCount: 0,\n      // isTransitioning: false,\n    }\n\n    //bind this\n    this.createPuzzle = this.createPuzzle.bind(this)\n    this.shufflePuzzle = this.shufflePuzzle.bind(this)\n    this.swap = this.swap.bind(this)\n    this.checkSolution = this.checkSolution.bind(this)\n  }\n\n  // methods\n  createPuzzle(size){\n    let arr = []\n    let temp = size ** 2\n    while (temp--) arr.unshift(temp)\n    this.setState({\n      size,\n      cellsArray: arr,\n      blankIdx: size ** 2 - 1,\n      isSolution: false,\n    })\n  }\n\n  shufflePuzzle(){\n    let arr = this.state.cellsArray\n    arr = shuffleArray([...arr])\n    this.setState(state => ({\n      cellsArray: arr\n    }))\n  }\n\n  swap(idx1, idx2, val1, val2){\n\n    let newArr = [...this.state.cellsArray]\n    // console.log(newArr)\n    newArr[idx1] = val2\n    newArr[idx2] = val1\n    // console.log(newArr)\n    this.setState(state => ({\n      cellsArray: newArr\n    }))\n    this.checkSolution(newArr)\n  }\n\n  checkSolution(cellsArray){\n    // let { cellsArray } = this.state\n    let { length } = cellsArray\n    let isSolution = true\n    // all positions must be equal to its cellNum\n    for (let cellNum = 0; cellNum < length; cellNum++) {\n      let pos = cellsArray[cellNum]\n      if (pos !== cellNum) {\n        isSolution = false\n        break\n      }\n    }\n    this.setState({\n      isSolution\n    })\n  }\n\n  \n  render() {\n    return (\n      <div>\n        <PuzzleConfigUI\n          createPuzzle={this.createPuzzle}\n          shufflePuzzle={this.shufflePuzzle}\n        />\n        <Puzzle\n          size={this.state.size}\n          cellsArray={this.state.cellsArray}\n          blankIdx={this.state.blankIdx}\n          checkSolution={this.checkSolution}\n          isSolution={this.state.isSolution}\n\n          swap={this.swap}\n        />\n        <div class=\"solution-msg\">\n          {this.state.isSolution ? 'Solved!' : ''}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}